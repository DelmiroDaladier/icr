---
categories: data structures and algorithms
description: A Bloom filter is a memory-efficient data structure for approximatemembership
  queries used in numerous fields of computer science. Recently,learned Bloom filters
  that achieve better memory efficiency using machinelearning models have attracted
  attention. One such filter, the partitionedlearned Bloom filter (PLBF), achieves
  excellent memory efficiency. However,PLBF requires a $O(N^3k)$ time complexity to
  construct the data structure,where $N$ and $k$ are the hyperparameters of PLBF.
  One can improve memoryefficiency by increasing $N$, but the construction time becomes
  extremely long.Thus, we propose two methods that can reduce the construction time
  whilemaintaining the memory efficiency of PLBF. First, we propose fast PLBF, whichcan
  construct the same data structure as PLBF with a smaller time complexity$O(N^2k)$.
  Second, we propose fast PLBF++, which can construct the datastructure with even
  smaller time complexity $O(Nk\log N + Nk^2)$. Fast PLBF++does not necessarily construct
  the same data structure as PLBF. Still, it isalmost as memory efficient as PLBF,
  and it is proved that fast PLBF++ has thesame data structure as PLBF when the distribution
  satisfies a certainconstraint. Our experimental results from real-world datasets
  show that (i)fast PLBF and fast PLBF++ can construct the data structure up to 233
  and 761times faster than PLBF, (ii) fast PLBF can achieve the same memory efficiencyas
  PLBF, and (iii) fast PLBF++ can achieve almost the same memory efficiency asPLBF.
execute:
  echo: false
format:
  html:
    df-print: paged
    toc: true
image: https://upload.wikimedia.org/wikipedia/commons/5/59/Empty.png
params:
  author_1:
    name: Sato, Atsuki
  author_2:
    name: Matsui, Yusuke
  overview: A Bloom filter is a memory-efficient data structure for approximatemembership
    queries used in numerous fields of computer science. Recently,learned Bloom filters
    that achieve better memory efficiency using machinelearning models have attracted
    attention. One such filter, the partitionedlearned Bloom filter (PLBF), achieves
    excellent memory efficiency. However,PLBF requires a $O(N^3k)$ time complexity
    to construct the data structure,where $N$ and $k$ are the hyperparameters of PLBF.
    One can improve memoryefficiency by increasing $N$, but the construction time
    becomes extremely long.Thus, we propose two methods that can reduce the construction
    time whilemaintaining the memory efficiency of PLBF. First, we propose fast PLBF,
    whichcan construct the same data structure as PLBF with a smaller time complexity$O(N^2k)$.
    Second, we propose fast PLBF++, which can construct the datastructure with even
    smaller time complexity $O(Nk\log N + Nk^2)$. Fast PLBF++does not necessarily
    construct the same data structure as PLBF. Still, it isalmost as memory efficient
    as PLBF, and it is proved that fast PLBF++ has thesame data structure as PLBF
    when the distribution satisfies a certainconstraint. Our experimental results
    from real-world datasets show that (i)fast PLBF and fast PLBF++ can construct
    the data structure up to 233 and 761times faster than PLBF, (ii) fast PLBF can
    achieve the same memory efficiencyas PLBF, and (iii) fast PLBF++ can achieve almost
    the same memory efficiency asPLBF.
  pdf_url: http://arxiv.org/pdf/2306.02846
title: Fast Partitioned Learned Bloom Filter

---
```{ojs} 

 names = ["Atsuki Sato","Yusuke Matsui"] 

``` 

## Tldr 
A Bloom filter is a memory-efficient data structure for approximatemembership queries used in numerous fields of computer science. Recently,learned Bloom filters that achieve better memory efficiency using machinelearning models have attracted attention. One such filter, the partitionedlearned Bloom filter (PLBF), achieves excellent memory efficiency. However,PLBF requires a $O(N^3k)$ time complexity to construct the data structure,where $N$ and $k$ are the hyperparameters of PLBF. One can improve memoryefficiency by increasing $N$, but the construction time becomes extremely long.Thus, we propose two methods that can reduce the construction time whilemaintaining the memory efficiency of PLBF. First, we propose fast PLBF, whichcan construct the same data structure as PLBF with a smaller time complexity$O(N^2k)$. Second, we propose fast PLBF++, which can construct the datastructure with even smaller time complexity $O(Nk\log N + Nk^2)$. Fast PLBF++does not necessarily construct the same data structure as PLBF. Still, it isalmost as memory efficient as PLBF, and it is proved that fast PLBF++ has thesame data structure as PLBF when the distribution satisfies a certainconstraint. Our experimental results from real-world datasets show that (i)fast PLBF and fast PLBF++ can construct the data structure up to 233 and 761times faster than PLBF, (ii) fast PLBF can achieve the same memory efficiencyas PLBF, and (iii) fast PLBF++ can achieve almost the same memory efficiency asPLBF.

## Paper-authors

```{ojs} 

 html`<ul>${names.map(name => html`<li><a href="../../posts_by_author.html?name=${name}" >${name}</a></li>`)}</ul>` 

``` 

```{ojs} 

 htl = require("htl@0.2") 

``` 

```{ojs} 

 html = htl.html 

``` 

## More Resources
[![](https://img.shields.io/badge/PDF-green?style=flat)]({{< meta params.pdf_url >}})
