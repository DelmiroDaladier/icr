---
description: 'We study the fundamental problem of finding the best string to represent
  agiven set, in the form of the Closest String problem: Given a set $X \subseteq\Sigma^d$
  of $n$ strings, find the string $x^*$ minimizing the radius of thesmallest Hamming
  ball around $x^*$ that encloses all the strings in $X$. Inthis paper, we investigate
  whether the Closest String problem admits algorithmsthat are faster than the trivial
  exhaustive search algorithm. We obtain thefollowing results for the two natural
  versions of the problem:$\bullet$ In the continuous Closest String problem, the
  goal is to find thesolution string $x^*$ anywhere in $\Sigma^d$. For binary strings,
  theexhaustive search algorithm runs in time $O(2^d poly(nd))$ and we prove that
  itcannot be improved to time $O(2^{(1-\epsilon) d} poly(nd))$, for any $\epsilon>
  0$, unless the Strong Exponential Time Hypothesis fails.$\bullet$ In the discrete
  Closest String problem, $x^*$ is required to be inthe input set $X$. While this
  problem is clearly in polynomial time, itsfine-grained complexity has been pinpointed
  to be quadratic time $n^{2 \pmo(1)}$ whenever the dimension is $\omega(\log n) <
  d < n^{o(1)}$. We complementthis known hardness result with new algorithms, proving
  essentially thatwhenever $d$ falls out of this hard range, the discrete Closest
  String problemcan be solved faster than exhaustive search. In the small-$d$ regime,
  ouralgorithm is based on a novel application of the inclusion-exclusion principle.Interestingly,
  all of our results apply (and some are even stronger) to thenatural dual of the
  Closest String problem, called the Remotest String problem,where the task is to
  find a string maximizing the Hamming distance to all thestrings in $X$.'
execute:
  echo: false
format:
  html:
    df-print: paged
    toc: true
image: https://upload.wikimedia.org/wikipedia/commons/5/59/Empty.png
params:
  author_1:
    name: Abboud, Amir
  author_2:
    name: Fischer, Nick
  author_3:
    name: Goldenberg, Elazar
  author_4:
    name: S., Karthik C.
  author_5:
    name: Safier, Ron
  overview: 'We study the fundamental problem of finding the best string to represent
    agiven set, in the form of the Closest String problem: Given a set $X \subseteq\Sigma^d$
    of $n$ strings, find the string $x^*$ minimizing the radius of thesmallest Hamming
    ball around $x^*$ that encloses all the strings in $X$. Inthis paper, we investigate
    whether the Closest String problem admits algorithmsthat are faster than the trivial
    exhaustive search algorithm. We obtain thefollowing results for the two natural
    versions of the problem:$\bullet$ In the continuous Closest String problem, the
    goal is to find thesolution string $x^*$ anywhere in $\Sigma^d$. For binary strings,
    theexhaustive search algorithm runs in time $O(2^d poly(nd))$ and we prove that
    itcannot be improved to time $O(2^{(1-\epsilon) d} poly(nd))$, for any $\epsilon>
    0$, unless the Strong Exponential Time Hypothesis fails.$\bullet$ In the discrete
    Closest String problem, $x^*$ is required to be inthe input set $X$. While this
    problem is clearly in polynomial time, itsfine-grained complexity has been pinpointed
    to be quadratic time $n^{2 \pmo(1)}$ whenever the dimension is $\omega(\log n)
    < d < n^{o(1)}$. We complementthis known hardness result with new algorithms,
    proving essentially thatwhenever $d$ falls out of this hard range, the discrete
    Closest String problemcan be solved faster than exhaustive search. In the small-$d$
    regime, ouralgorithm is based on a novel application of the inclusion-exclusion
    principle.Interestingly, all of our results apply (and some are even stronger)
    to thenatural dual of the Closest String problem, called the Remotest String problem,where
    the task is to find a string maximizing the Hamming distance to all thestrings
    in $X$.'
  pdf_url: http://arxiv.org/pdf/2305.16878
title: Can You Solve Closest String Faster than Exhaustive Search?

---
```{ojs} 

 names = ["Amir Abboud","Nick Fischer","Elazar Goldenberg","Karthik C. S.","Ron Safier"] 

``` 

## Tldr 
We study the fundamental problem of finding the best string to represent agiven set, in the form of the Closest String problem: Given a set $X \subseteq\Sigma^d$ of $n$ strings, find the string $x^*$ minimizing the radius of thesmallest Hamming ball around $x^*$ that encloses all the strings in $X$. Inthis paper, we investigate whether the Closest String problem admits algorithmsthat are faster than the trivial exhaustive search algorithm. We obtain thefollowing results for the two natural versions of the problem:$\bullet$ In the continuous Closest String problem, the goal is to find thesolution string $x^*$ anywhere in $\Sigma^d$. For binary strings, theexhaustive search algorithm runs in time $O(2^d poly(nd))$ and we prove that itcannot be improved to time $O(2^{(1-\epsilon) d} poly(nd))$, for any $\epsilon> 0$, unless the Strong Exponential Time Hypothesis fails.$\bullet$ In the discrete Closest String problem, $x^*$ is required to be inthe input set $X$. While this problem is clearly in polynomial time, itsfine-grained complexity has been pinpointed to be quadratic time $n^{2 \pmo(1)}$ whenever the dimension is $\omega(\log n) < d < n^{o(1)}$. We complementthis known hardness result with new algorithms, proving essentially thatwhenever $d$ falls out of this hard range, the discrete Closest String problemcan be solved faster than exhaustive search. In the small-$d$ regime, ouralgorithm is based on a novel application of the inclusion-exclusion principle.Interestingly, all of our results apply (and some are even stronger) to thenatural dual of the Closest String problem, called the Remotest String problem,where the task is to find a string maximizing the Hamming distance to all thestrings in $X$.

## Paper-authors

```{ojs} 

 html`<ul>${names.map(name => html`<li><a href="../../posts_by_author.html?name=${name}" >${name}</a></li>`)}</ul>` 

``` 

```{ojs} 

 htl = require("htl@0.2") 

``` 

```{ojs} 

 html = htl.html 

``` 

## More Resources
[![](https://img.shields.io/badge/PDF-green?style=flat)]({{< meta params.pdf_url >}})
