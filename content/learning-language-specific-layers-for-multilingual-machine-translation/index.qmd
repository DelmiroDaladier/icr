---
description: Multilingual Machine Translation promises to improve translation qualitybetween
  non-English languages. This is advantageous for several reasons, namelylower latency
  (no need to translate twice), and reduced error cascades (e.g.,avoiding losing gender
  and formality information when translating throughEnglish). On the downside, adding
  more languages reduces model capacity perlanguage, which is usually countered by
  increasing the overall model size,making training harder and inference slower. In
  this work, we introduceLanguage-Specific Transformer Layers (LSLs), which allow
  us to increase modelcapacity, while keeping the amount of computation and the number
  of parametersused in the forward pass constant. The key idea is to have some layers
  of theencoder be source or target language-specific, while keeping the remaininglayers
  shared. We study the best way to place these layers using a neuralarchitecture search
  inspired approach, and achieve an improvement of 1.3 chrF(1.5 spBLEU) points over
  not using LSLs on a separate decoder architecture, and1.9 chrF (2.2 spBLEU) on a
  shared decoder one.
execute:
  echo: false
format:
  html:
    df-print: paged
    toc: true
image: https://upload.wikimedia.org/wikipedia/commons/5/59/Empty.png
params:
  author_1:
    name: Pires, Telmo Pessoa
  author_2:
    name: Schmidt, Robin M.
  author_3:
    name: Liao, Yi-Hsiu
  author_4:
    name: Peitz, Stephan
  overview: Multilingual Machine Translation promises to improve translation qualitybetween
    non-English languages. This is advantageous for several reasons, namelylower latency
    (no need to translate twice), and reduced error cascades (e.g.,avoiding losing
    gender and formality information when translating throughEnglish). On the downside,
    adding more languages reduces model capacity perlanguage, which is usually countered
    by increasing the overall model size,making training harder and inference slower.
    In this work, we introduceLanguage-Specific Transformer Layers (LSLs), which allow
    us to increase modelcapacity, while keeping the amount of computation and the
    number of parametersused in the forward pass constant. The key idea is to have
    some layers of theencoder be source or target language-specific, while keeping
    the remaininglayers shared. We study the best way to place these layers using
    a neuralarchitecture search inspired approach, and achieve an improvement of 1.3
    chrF(1.5 spBLEU) points over not using LSLs on a separate decoder architecture,
    and1.9 chrF (2.2 spBLEU) on a shared decoder one.
  pdf_url: http://arxiv.org/pdf/2305.02665
title: Learning Language-Specific Layers for Multilingual Machine Translation

---
```{ojs} 

 names = ["Telmo Pessoa Pires","Robin M. Schmidt","Yi-Hsiu Liao","Stephan Peitz"] 

``` 

## Tldr 
Multilingual Machine Translation promises to improve translation qualitybetween non-English languages. This is advantageous for several reasons, namelylower latency (no need to translate twice), and reduced error cascades (e.g.,avoiding losing gender and formality information when translating throughEnglish). On the downside, adding more languages reduces model capacity perlanguage, which is usually countered by increasing the overall model size,making training harder and inference slower. In this work, we introduceLanguage-Specific Transformer Layers (LSLs), which allow us to increase modelcapacity, while keeping the amount of computation and the number of parametersused in the forward pass constant. The key idea is to have some layers of theencoder be source or target language-specific, while keeping the remaininglayers shared. We study the best way to place these layers using a neuralarchitecture search inspired approach, and achieve an improvement of 1.3 chrF(1.5 spBLEU) points over not using LSLs on a separate decoder architecture, and1.9 chrF (2.2 spBLEU) on a shared decoder one.

## Paper-authors

```{ojs} 

 html`<ul>${names.map(name => html`<li><a href="../../posts_by_author.html?name=${name}" >${name}</a></li>`)}</ul>` 

``` 

```{ojs} 

 htl = require("htl@0.2") 

``` 

```{ojs} 

 html = htl.html 

``` 

## More Resources
[![](https://img.shields.io/badge/PDF-green?style=flat)]({{< meta params.pdf_url >}})
